apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "hdfs.fullname" . }}-datanode
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/hadoop-configmap.yaml") . | sha256sum }}
  labels:
    app.kubernetes.io/name: {{ include "hdfs.name" . }}
    app.kubernetes.io/component: datanode
    {{- include "hdfs.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "hdfs.name" . }}
      app.kubernetes.io/component: datanode
      app.kubernetes.io/instance: {{ .Release.Name | quote }}
  serviceName: {{ include "hdfs.fullname" . }}-datanode
  replicas: {{ .Values.dataNode.replicas }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "hdfs.name" . }}
        app.kubernetes.io/component: datanode
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
    spec:
      affinity:
        podAntiAffinity:
        {{- if eq .Values.antiAffinity "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: {{ include "hdfs.name" . }}
                app.kubernetes.io/component: datanode
                {{- include "hdfs.labels" . | nindent 16 }}
        {{- else if eq .Values.antiAffinity "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 5
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: {{ include "hdfs.name" . }}
                  app.kubernetes.io/component: datanode
                  {{- include "hdfs.labels" . | nindent 18 }}
        {{- end }}
      securityContext:
        fsGroup: 114
      initContainers:
      - name: "chown"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
        - /bin/bash
        - -c
        - chown -R hdfs:hadoop /dfs &&
          chmod g+s /dfs
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /dfs
          name: dfs
      containers:
      - name: datanode
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        command:
           - "/bin/bash"
           - "/tmp/hadoop-config/bootstrap.sh"
           - "-d"
           - "datanode"
        resources:
{{ toYaml .Values.dataNode.resources | indent 10 }}
        readinessProbe:
          httpGet:
            path: /
            port: {{ .Values.dataNode.httpPort }}
          initialDelaySeconds: 5
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: /
            port: {{ .Values.dataNode.httpPort }}
          initialDelaySeconds: 10
          timeoutSeconds: 2
        volumeMounts:
        - name: hadoop-config
          mountPath: /tmp/hadoop-config
        - name: dfs
          mountPath: /dfs
      volumes:
      - name: hadoop-config
        configMap:
          name: {{ include "hdfs.fullname" . }}-hadoop
       {{- if not .Values.persistence.dataNode.enabled }}
      - name: dfs
        emptyDir: {}
      {{- end }}
  {{- if .Values.persistence.dataNode.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: dfs
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "{{ .Values.persistence.dataNode.size }}"
      {{- if .Values.persistence.dataNode.storageClass }}
      {{- if (eq "-" .Values.persistence.dataNode.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.dataNode.storageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}
